cmake_minimum_required(VERSION 3.10)

# 获取当前目录的名称作为项目名称
get_filename_component(CURRENT_DIR_PATH "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)
get_filename_component(CURRENT_DIR_NAME "${CURRENT_DIR_PATH}" NAME)
project(${CURRENT_DIR_NAME})

# 设置 Qt 库的路径
set(QT_PATH D:/Qt/qt_app/5.14.2/msvc2017_64)
set(CMAKE_PREFIX_PATH ${QT_PATH}/lib/cmake)

# 设置 C++ 标准
set(CMAKE_CXX_STANDARD 11)

# 搜索模块路径，以便 find_package 能够找到 Qt 的包
set(CMAKE_MODULE_PATH ${QT_PATH}/lib/cmake)

# 查找 Qt5 Core 组件
find_package(Qt5 COMPONENTS Core Sql REQUIRED)

# 收集源文件
file(GLOB CPP_FILES "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")
file(GLOB HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/*.h")

# 添加可执行文件
add_executable(${PROJECT_NAME} ${CPP_FILES} ${HEADER_FILES})

# 链接 Qt5 Core 库
target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Core Qt5::Sql)

# 如果需要复制 DLL 文件到输出目录，可以使用下面的代码
set(DLL_SOURCE_DIR D:/github_proj/advanceC++/MyThirdparty)
file(GLOB DLL_FILES "${DLL_SOURCE_DIR}/*.dll")

foreach(dll_file ${DLL_FILES})
    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${dll_file}"
        $<TARGET_FILE_DIR:${PROJECT_NAME}>
        COMMENT "Copying ${dll_file} to the target directory"
    )
endforeach()